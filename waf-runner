#!/bin/bash

set -e # exit if command returns non-zero exit code

######## FUNCTION ########

# Print colorful formatted messages.
print_msg() {
    local msg=$1
    local msg_type=$2

    local color
    local nocolor='\033[0m'

    # https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
    case $msg_type in
        err)
            color='\033[0;31m'
            ;;
        ok)
            color='\033[0;32m'
            ;;
        *)
            color='\033[0;34m'
            ;;
    esac

    printf "${color}--> ${msg}${nocolor}\n"
}

# Create temporary directory and store its name into global variable TMPDIR.
create_temp_dir() {
    print_msg "Create temporary directory"
    TMPDIR=$(mktemp -d)
    echo $TMPDIR

    # Bail out if the temp directory wasn't created successfully.
    if [ ! -e $TMPDIR ]; then
        >&2 echo "Failed to create temp directory"
        exit 1
    fi
}

create_logs_dir() {
    print_msg "Create directories for WAF logs in /tmp/var/log"
    mkdir -vp /tmp/var/log
    mkdir -vp /tmp/var/log/nginx
}

# Setup temp dir, copy needed files into it and create dirs for logs.
copy_image_files() {
    local dir=$1

    print_msg "Copy all needed files from $dir to $TMPDIR"
    cp -vr $dir/* $TMPDIR
}

create_docker_compose_file() {
    local image=$1
    print_msg "Create $TMPDIR/docker-compose.yaml"
    cat << EOF > "$TMPDIR/docker-compose.yaml"
version: '3.3'

services:
    testing-webserver:
        container_name: testing-webserver
        image: "$image"
        ports:
            - 8080:80

    testing-waf:
        container_name: testing-waf
        depends_on:
            - testing-webserver
        build:
            dockerfile: Dockerfile
            context: .
        ports:
            - 80:80
        volumes:
            - type: bind
              source: /tmp/var/log
              target: /var/log
EOF
}

# Remove docker containers and networks. Remove temp dir.
clean_up () {
    print_msg "Clean up"
    docker-compose down
    rm -rf /tmp/var/log
    rm -rf "$TMPDIR"
}

# Build and run WAF and protected demo app.
build_waf() {
    local verbose=$1

    print_msg "Run docker images for WAF and web server"
    cd $TMPDIR
    if [[ $verbose == 1 ]]; then
        docker-compose up -d --build
    else
        docker-compose up -d --build > /dev/null
    fi
}

# Test WAF has been started.
test_waf_is_up() {
    print_msg "Check WAF is up and proxying requests"
    sleep 3
    #if curl -sI localhost:80 | grep -E "^HTTP.*OK" > /dev/null; then
    if curl --silent --fail localhost:80 > /dev/null; then
        docker ps
        tail /tmp/var/log/nginx/*.log
        print_msg "WAF container is up and running" "ok"
    else
        docker ps
        tail /tmp/var/log/nginx/*.log
        print_msg "WAF container is not working" "err"
    fi
}

# Check directory containing WAF Dockerfile and related files.
check_dir() {
    local dir=$1

    if [[ -z $dir ]]; then
        help_and_exit
    fi

    if [[ ! -d $dir ]]; then
        print_msg "'$dir' is not a valid directory" err
        exit 1
    fi

    if [[ ! -f $dir/Dockerfile ]]; then
        print_msg "'$dir' does not contain Dockerfile" err
        exit 1
    fi
}

help_and_exit() {
    cat << EOF
${0##*/} [options] DIR

Build a WAF container and run it locally together with a backend web server
container. DIR (e.g. '.') is directory containing the WAF Dockerfile and
other related files.

  options:
    -h, -?  help
    -v      be verbose
    -s      sleep (don't clean up containers) until Ctrl-C
    -i      image to use for backend web server (default is nginx)
EOF

    exit $1
}

######## MAIN ########

# A POSIX variable
OPTIND=1    # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
VERBOSE=0
MYSLEEP=0
BACKEND_IMAGE=nginx

# getops can't handle long options (--help) but can handle options clustering
# (-vf FILE)
while getopts "h?vsi:" opt; do
    case "$opt" in
    h|\?)
        help_and_exit 0
        ;;
    v)  VERBOSE=1
        ;;
    s)  MYSLEEP=1
        ;;
    i)  BACKEND_IMAGE=$OPTARG
    esac
done

# Shift off the options and optional --
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# Check DIR before clean_up is installed.
DIR="$@"
check_dir $DIR

# Make sure we run cleanup actions even if the script exits abnormally.
trap "exit 1"   HUP INT PIPE QUIT TERM
trap clean_up   EXIT # install clean_up

create_logs_dir
create_temp_dir
create_docker_compose_file "$BACKEND_IMAGE"
copy_image_files "$DIR"
build_waf "$VERBOSE"
test_waf_is_up

if [[ $MYSLEEP == 1 ]]; then
    print_msg "Sleeping until Ctrl-C"
    sleep 999999
fi
